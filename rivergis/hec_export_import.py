# -*- coding: utf-8 -*-

__author__ = 'Łukasz Dębek'

import hecobjects as heco


class HecRasExport(object):

    def __init__(self, rgis):
        self.rgis = rgis
        self.schema = rgis.rdb.SCHEMA
        self.srid = rgis.rdb.SRID

    def export_StreamCenterlines(self):
        qry = self.number_of_reaches()
        nor = int(self.rgis.rdb.run_query(qry, fetch=True)[0][0])
        if self.rgis.DEBUG:
            self.rgis.addInfo('Nr of reaches: {:d}'.format(nor))
        else:
            pass
        qry = self.nodes()
        nodes = self.run_query(qry, fetch=True)
        qry = self.reaches()
        reaches = self.run_query(qry, fetch=True)

#STREAM

    def number_of_reaches(self):
        qry = 'SELECT COUNT("ReachID") FROM "{0}"."StreamCenterlines";'
        qry = qry.format(self.schema)
        return qry

    def nodes(self):
        qry = 'SELECT "NodeID", "X", "Y" FROM "{0}"."NodesTable";'
        qry = qry.format(self.schema)
        return qry

    def reaches(self):
        qry = 'SELECT "ReachID", "RiverCode", "ReachCode", "FromNode", "ToNode", ST_AsText(geom) FROM "{0}"."StreamCenterlines";'
        qry = qry.format(self.schema)
        return qry

# TODO: everything below ;-)
# XS

    def number_of_xsections(self):
        qry = 'SELECT COUNT("XsecID") FROM "{0}"."XSCutLines";'.format(self.SCHEMA)
        nox = int(self.run_query(qry, fetch=True)[0][0])
        if self.rgis.DEBUG:
            self.rgis.addInfo('Nr of cross-sections: {:d}'.format(nox))
        return nox

    def spatial_extent(self):
        qry = 'SELECT ST_Extent(geom) FROM "{0}"."XSCutLines";'.format(self.SCHEMA)
        box = self.run_query(qry, fetch=True)[0][0]
        boxMin = box[box.index('(')+1:box.index(',')].split()
        boxMax = box[box.index(',')+1:box.index(')')].split()
        ext = 'XMIN: {0}\n      YMIN: {1}\n      XMAX: {2}\n      YMAX: {3}\n   '\
                              .format(boxMin[0], boxMin[1], boxMax[0], boxMax[1])
        if self.rgis.DEBUG:
            self.rgis.addInfo(ext)
        return ext

    def centerline_points_wkt(self, wkt):
        res = ''
        pts = wkt[11:-1].split(',')
        for pt in pts:
            res += '{0}{1}, NULL\n'.format(' '*9, ', '.join([c for c in pt.split()]))
        return res

    def spatial_unit(self):
        u = self.rgis.crs.mapUnits()
        return QGis.toLiteral(u).upper()

    def get_ras_gis_import(self):
        imp = ''
        imp += self.get_ras_gis_import_header()
        imp += self.get_stream_network()
        return imp

    def get_ras_gis_import_header(self):
        """
        Return header of RAS GIS Import file.
        """
        hdr = '#This file is generated by RiverGIS, a QGIS plugin (http://rivergis.com)\n'
        hdr += 'BEGIN HEADER:\n   DTM TYPE: GRID\n   DTM: \n   '
        hdr += 'STREAM LAYER: {0}@{1}/{2}/StreamCenterlines\n   '.format(\
            self.dbname, self.host, self.SCHEMA)
        hdr += 'NUMBER OF REACHES: {:d}\n   '.format(self.number_of_reaches())
        hdr += 'CROSS-SECTION LAYER: {0}@{1}/{2}/XSCutLines\n   '.format(\
            self.dbname, self.host, self.SCHEMA)
        hdr += 'NUMBER OF CROSS-SECTIONS: {:d}\n   '.format(self.number_of_xsections())
        hdr += 'MAP PROJECTION:\n   PROJECTION ZONE:\n   DATUM:\n   VERTICAL DATUM:\n   '
        hdr += 'BEGIN SPATIAL EXTENT:\n      {}END SPATIAL EXTENT:\n   '.format(\
            self.spatial_extent())
        hdr += 'UNITS: {0}\nEND HEADER:\n\n'.format(self.spatial_unit())
        return hdr

    def get_stream_network(self):
        """
        Return STREAM NETWORK part of RAS GIS Import file
        """
        net = 'BEGIN STREAM NETWORK:\n\n'
        qry = 'SELECT "NodeID", "X", "Y" FROM "{0}"."NodesTable";'.format(self.SCHEMA)
        nodes = self.run_query(qry, fetch=True)
        for node in nodes:
            net += '   ENDPOINT: {:f}, {:f}, 0, {}\n'.format(node[1], node[2], node[0])

        # for each reach
        reaches = self.run_query(self.get_reaches(), fetch=True)
        for reach in reaches:
            net += '\n   REACH:\n      STREAM ID: {0}\n      REACH ID: {1}\n      '.format(\
                   reach[1], reach[2])
            net += 'FROM POINT: {:d}\n      '.format(reach[3])
            net += 'TO POINT: {:d}\n      CENTERLINE:\n'.format(reach[4])
            net += self.centerline_points_wkt(reach[5])
            net += '   END:\n'
        net += '\nEND STREAM NETWORK:\n\n'
        return net
