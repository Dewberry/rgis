# -*- coding: utf-8 -*-

__author__ = 'Łukasz Dębek'

from qgis.core import QGis

class HecRasExport(object):
    """
    Exporting model to RAS GIS Import file.
    """
    def __init__(self, rgis):
        self.rgis = rgis
        self.header = HeaderBuilder(rgis)
        self.network = NetworkBuilder(rgis)

    def gis_import_file(self):
        imp = self.header.build_header()
        imp += self.network.build_network()
        return imp


class HeaderBuilder(object):
    """
    Return header of RAS GIS Import file.
    """
    def __init__(self, rgis):
        self.rgis = rgis
        self.dbname = rgis.rdb.dbname
        self.host = rgis.rdb.host
        self.schema = rgis.rdb.SCHEMA
        self.srid = rgis.rdb.SRID
        self.nor = None
        self.nox = None
        self.se = None
        self.su = None

    def number_of_reaches(self):
        qry = 'SELECT COUNT("ReachID") FROM "{0}"."StreamCenterlines";'
        qry = qry.format(self.schema)
        nor = int(self.rgis.rdb.run_query(qry, fetch=True)[0][0])
        if self.rgis.DEBUG:
            self.rgis.addInfo('Nr of reaches: {0:d}'.format(nor))
        return nor

    def number_of_xsections(self):
        qry = 'SELECT COUNT("XsecID") FROM "{0}"."XSCutLines";'
        qry = qry.format(self.schema)
        nox = int(self.rgis.rdb.run_query(qry, fetch=True)[0][0])
        if self.rgis.DEBUG:
            self.rgis.addInfo('Nr of cross-sections: {0:d}'.format(nox))
        return nox

    def spatial_extent(self):
        qry = 'SELECT ST_Extent(geom) FROM "{0}"."XSCutLines";'
        qry = qry.format(self.schema)
        box = self.rgis.rdb.run_query(qry, fetch=True)[0][0]
        box_min = box[box.index('(')+1:box.index(',')].split()
        box_max = box[box.index(',')+1:box.index(')')].split()
        ext = 'XMIN: {0}\n      YMIN: {1}\n      XMAX: {2}\n      YMAX: {3}\n   '
        ext = ext.format(box_min[0], box_min[1], box_max[0], box_max[1])
        if self.rgis.DEBUG:
            self.rgis.addInfo(ext)
        return ext

    def spatial_unit(self):
        u = self.rgis.crs.mapUnits()
        su = QGis.toLiteral(u).upper()
        return su

    def build_header(self):
        hdr = '''#This file is generated by RiverGIS, a QGIS plugin (http://rivergis.com)
BEGIN HEADER:
   DTM TYPE: GRID
   DTM:
   STREAM LAYER: {0}@{1}/{2}/StreamCenterlines
   NUMBER OF REACHES: {3:d}
   CROSS-SECTION LAYER: {0}@{1}/{2}/XSCutLines
   NUMBER OF CROSS-SECTIONS: {4:d}
   MAP PROJECTION:
   PROJECTION ZONE:
   DATUM:
   VERTICAL DATUM:
   BEGIN SPATIAL EXTENT:
      {5}END SPATIAL EXTENT:
      UNITS: {6}
END HEADER:

'''
        self.nor = self.number_of_reaches()
        self.nox = self.number_of_xsections()
        self.se = self.spatial_extent()
        self.su = self.spatial_unit()
        hdr = hdr.format(self.dbname, self.host, self.schema, self.nor, self.nox, self.se, self.su)
        return hdr


class NetworkBuilder(object):
    """
    Return STREAM NETWORK part of RAS GIS Import file.
    """
    def __init__(self, rgis):
        self.rgis = rgis
        self.schema = rgis.rdb.SCHEMA

    def unpack_centerline(self, net_centerline, wkt):
        centerline = ''
        pts = wkt[11:-1].split(',')
        for pt in pts:
            x, y = pt.split()
            centerline += net_centerline.format(x, y)
        return centerline

    def get_nodes(self):
        qry = 'SELECT "NodeID", "X", "Y" FROM "{0}"."NodesTable";'
        qry = qry.format(self.schema)
        nodes = self.rgis.rdb.run_query(qry, fetch=True)
        return nodes

    def get_reaches(self):
        qry = 'SELECT "ReachID", "RiverCode", "ReachCode", "FromNode", "ToNode", ST_AsText(geom) AS wkt FROM "{0}"."StreamCenterlines";'
        qry = qry.format(self.schema)
        reaches = self.rgis.rdb.run_query(qry, fetch=True)
        return reaches

    def build_network(self):
        net = 'BEGIN STREAM NETWORK:\n\n'
        net_node = '   ENDPOINT: {0:f}, {1:f}, 0, {2}\n'
        net_reach = '''
   REACH:
      STREAM ID: {0}
      REACH ID: {1}
      FROM POINT: {2}
      TO POINT: {3}
      CENTERLINE:
{4}   END:
'''
        net_centerline = '         {0}, {1}, NULL\n'
        net_end = '\nEND STREAM NETWORK:\n\n'
        nodes = self.get_nodes()
        reaches = self.get_reaches()
        for node in nodes:
            net += net_node.format(node['X'], node['Y'], node['NodeID'])
        for reach in reaches:
            centerlines = self.unpack_centerline(net_centerline, reach['wkt'])
            net += net_reach.format(reach['RiverCode'], reach['ReachCode'], reach['FromNode'], reach['ToNode'], centerlines)
        net += net_end
        return net


if __name__ == '__name__':
    pass
